// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid()) 
  google_id String? @unique
  username String @unique
  display_name String
  email String @unique
  password String
  isloginWithGoogle Boolean @default(false)
  role String @default("user")
  bio String?
  avatar_url String?
  refresh_token String?
  updated_at DateTime @updatedAt
  registered_at DateTime @default(now())
  posts Post[]
  comments Comment[]
  //reaction Reaction[]
  votes Vote[]
  @@index([id])
}

model Post {
  id String @id @default(cuid())
  author_id String
  author_name String
  title String
  content String
  created_at DateTime @default(now()) 
  updated_at DateTime @updatedAt
  category_name String
  author User @relation(fields: [author_id], references: [id], onDelete: Cascade)
  category Category @relation(fields: [category_name], references: [name])
  comments Comment[]
  votes Vote[]
  //reaction Reaction[]
}

model Category {
  id String @id @default(cuid())
  name String @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  posts Post[]
}

model Comment {
  id String @id @default(cuid())
  post_id String
  parent_id String?
  author_id String
  author_name String
  content String
  parent Comment? @relation("CommentReplies", fields: [parent_id], references: [id])
  replies Comment[] @relation("CommentReplies")
  //reaction Reaction[]
  votes Vote[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  author User @relation(fields: [author_id], references: [id], onDelete: Cascade)
  post Post @relation(fields: [post_id], references: [id])
}

model Vote {
  id String @id @default(cuid())
  value Int
  userId String
  postId String?
  commentId String?
  user User @relation(fields: [userId], references: [id])
  post Post? @relation(fields: [postId], references: [id])
  comment Comment? @relation(fields: [commentId], references: [id])

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

// model Reaction {
//   id String @id @default(cuid())
//   type String
//   author_id String
//   post_id String?
//   comment_id String?
//   created_at DateTime @default(now())
//   updated_at DateTime @updatedAt
//   author User @relation(fields: [author_id], references: [id])
//   post Post? @relation(fields: [post_id], references: [id])
//   comment Comment? @relation(fields: [comment_id], references: [id])
// }